#### importing data from table####
datafile<-read.table("F:/Statistical Analysis R (Proshantho Kumar)/Student data.txt")
View(datafile)
View(datafile)
datafile<-read.table("F:/Statistical Analysis R (Proshantho Kumar)/Student data.txt", header=TRUE)
View(datafile)
#### importing data from table####
datafile<-read.table("F:/Statistical Analysis R (Proshantho Kumar)/Student data.txt")
View(datafile)
datafile2<-read.table("F:/Statistical Analysis R (Proshantho Kumar)/Student data2.txt", header=TRUE, sep=':') # If column is separated using Colon we use sep
datafile2<-read.table("F:/Statistical Analysis R (Proshantho Kumar)/Student data 2.txt", header=TRUE, sep=':') # If column is separated using Colon we use sep
View(datafile2)
datafile
#### importing data from table####
datafile<-read.table("F:/Statistical Analysis R (Proshantho Kumar)/Student data.txt")
datafile
#### importing data from table####
datafile<-read.table("F:/Statistical Analysis R (Proshantho Kumar)/Student data.txt")
datafile
View(datafile)
datafile<-read.table("F:/Statistical Analysis R (Proshantho Kumar)/Student data.txt", header=TRUE)
datafile2<-read.table("F:/Statistical Analysis R (Proshantho Kumar)/Student data.txt", header=TRUE)
View(datafile)
View(datafile)
#### importing data from table####
datafile<-read.table("F:/Statistical Analysis R (Proshantho Kumar)/Student data.txt")
datafile
View(datafile)
datafile2<-read.table("F:/Statistical Analysis R (Proshantho Kumar)/Student data.txt", header=TRUE)
View(datafile2)
datafile3<-read.table("F:/Statistical Analysis R (Proshantho Kumar)/Student data 2.txt", header=TRUE, sep=':') # If column is separated using Colon we use sep
datafile3
View(datafile3)
View(datafile4)
datafile4<-read.table("F:/Statistical Analysis R (Proshantho Kumar)/Student data 2.txt", header=TRUE, sep=':') # If column is separated using Colon we use sep
View(datafile4)
datafile4<-read.table("F:/Statistical Analysis R (Proshantho Kumar)/Student data 2.txt", header=TRUE, sep=':', na.strings = '-') # For replacing '-' with 'NA'
datafile4
view(datafile4)
View(datafile5)
datafile5<-read.table("F:/Statistical Analysis R (Proshantho Kumar)/Student data 2.txt", header=TRUE, sep=':', na.strings = '-') # For replacing '-' with 'NA'
View(datafile5)
#### Taking above data as output in csv format####
write.csv(datafile,"F:/Statistical Analysis R (Proshantho Kumar)/Student data.csv")
write.csv(datafile,"F:/Statistical Analysis R (Proshantho Kumar)/Student data.csv", row.names = FALSE)
write.csv(datafile,"F:/Statistical Analysis R (Proshantho Kumar)/Student data.csv", row.names = FALSE, quote = FALSE)
#### Specific datafile saving from Environment ####
save(datafile, file= "F:/Statistical Analysis R (Proshantho Kumar)/save.txt")
getwd()
getwd()
#### Specific datafile saving from Environment ####
save(datafile, file= "F:/Statistical Analysis R (Proshantho Kumar)/save.txt")
getwd()
#### Specific datafile saving from Environment ####
save(datafile, file= "F:/Statistical Analysis R (Proshantho Kumar)/save.txt")
getwd()
#### Taking above data as output in csv format####
write.csv(datafile,"F:/Statistical Analysis R (Proshantho Kumar)/Student data.csv")
#### importing data from table####
datafile<-read.table("F:/Statistical Analysis R (Proshantho Kumar)/Student data.txt")
datafile
View(datafile)
datafile2<-read.table("F:/Statistical Analysis R (Proshantho Kumar)/Student data.txt", header=TRUE)
View(datafile2)
datafile
datafile2<-read.table("F:/Statistical Analysis R (Proshantho Kumar)/Student data.txt", header=TRUE)
datafile2
datafile3<-read.table("F:/Statistical Analysis R (Proshantho Kumar)/Student data 2.txt", header=TRUE, sep=':') # If column is separated using Colon we use sep
datafile3
datafile4<-read.table("F:/Statistical Analysis R (Proshantho Kumar)/Student data 2.txt", header=TRUE, sep=':') #
datafile4
datafile5<-read.table("F:/Statistical Analysis R (Proshantho Kumar)/Student data 2.txt", header=TRUE, sep=':', na.strings = '-') # For replacing '-' with 'NA'
datafile5
#### Taking above data as output in csv format####
write.csv(datafile,"F:/Statistical Analysis R (Proshantho Kumar)/Student data.csv")
write.csv(datafile,"F:/Statistical Analysis R (Proshantho Kumar)/Student data.csv", row.names = FALSE)
write.csv(datafile,"F:/Statistical Analysis R (Proshantho Kumar)/Student data.csv", row.names = FALSE, quote = Fal)
write.csv(datafile,"F:/Statistical Analysis R (Proshantho Kumar)/Student data.csv", row.names = FALSE, quote = FALSE)
#### Specific datafile saving from Environment ####
save(datafile, file= "F:/Statistical Analysis R (Proshantho Kumar)/save.txt")
getwd()
####deleting datafile ####
rm(datafile)
#### Reloading save.text datafile that I deleted ####
load("save.txt")
#### Reloading save.text datafile that I deleted ####
load("F:/Statistical Analysis R (Proshantho Kumar)/save.txt")
datafile
x[2]
x<-c(2,4,6,7)
x
x[2]
x[c(2,3)]
names(x<-c("Rahim", "Karim","Arif" ))
x
x<-c(2,4,6,7)
x
names(x<-c("Rahim", "Karim","Arif" ))
x
names(x<-c("Rahim", "Karim","Arif" ))
names(x)<-c('Rahim','Karim', 'Arif')
x
x['Arif']
x<-c(2,4,6,7)
x
x[2]
x[c(2,3)]
names(x)<-c('Rahim','Karim', 'Arif')
x
x['Arif']
setwd("F:/Statistics with R/Probability Distribution")
#Binomial distribution
N <- 10000
n <- 20
p <- .5
x <- rep(0,N)
for (i in 1:N) {
x[i] <- sum(runif(n)<p)
}
hist(x,
col='light blue',
main="Simulating a binomial law")
N <- 1000
n <- 10
p <- .5
x <- rbinom(N,n,p)
hist(x,
xlim = c(min(x), max(x)),
probability = TRUE,
nclass = max(x) - min(x) + 1,
col = 'lightblue',
main = 'Binomial distribution, n=10, p=.5')
lines(density(x, bw=1), col = 'red', lwd = 3)
#Hypergeometric distribution
N <- 10000
n <- 5
urn <- c(rep(1,15),rep(0,5))
x <- NULL
for (i in 1:N) {
x <- append(x, sum(sample( urn, n, replace=F )))
}
hist(x,
xlim=c(min(x),max(x)), probability=T, nclass=max(x)-min(x)+1,
col='lightblue',
main='Hypergeometric distribution, n=20, p=.75; k=5')
lines(density(x,bw=1), col='red', lwd=3)
#Poisson distribution
N <- 10000
x <- rpois(N, 1)
hist(x,
xlim=c(min(x),max(x)), probability=T, nclass=max(x)-min(x)+1,
col='lightblue',
main='Poisson distribution, lambda=1')
lines(density(x,bw=1), col='red', lwd=3)
#Geometric distribution
my.rgeom <- function (N, p) {
bernoulli <- sample( c(0,1), N, replace=T, prob=c(1-p, p) )
diff(c(0, which(bernoulli == 1))) - 1
}
hist( my.rgeom(10000, .5), col="light blue",
main="Geometric distribution" )
#Negative binomial distribution
N <- 100000
x <- rnbinom(N, 10, .25)
hist(x,
xlim=c(min(x),max(x)), probability=T, nclass=max(x)-min(x)+1,
col='lightblue',
main='Negative binomial distribution, n=10, p=.25')
lines(density(x,bw=1), col='red', lwd=3)
#Expenential distribution
curve(dexp(x), xlim=c(0,10), col='red', lwd=3,
main='Exponential Probability Distribution Function')
n <- 1000
x <- rexp(n)
hist(x, probability=T,
col='light blue', main='Exponential Distribution')
lines(density(x), col='red', lwd=3)
curve(dexp(x), xlim=c(0,10), col='red', lwd=3, lty=2,
add=T)
#gaussian probability
curve(dnorm(x), xlim=c(-3,3), col='red', lwd=3)
title(main='Gaussian Probability Distribution Function')
#cumulative density
curve(pnorm(x), xlim=c(-3,3), col='red', lwd=3)
title(main='Cumulative gaussian distribution function')
#gaussian dsitribution
n <- 1000
x <- rnorm(n)
hist(x, probability=T, col='light blue', main='Gaussian Distribution')
lines(density(x), col='red', lwd=3)
curve(dnorm(x), add=T, col='red', lty=2, lwd=3)
legend(par('usr')[2], par('usr')[4], xjust=1,
c('sample density', 'theoretical density'),
lwd=2, lty=c(1,2),
col='red')
#Chi2 distribution with one degree of freedom
curve(dchisq(x,1), xlim=c(0,5), col='red', lwd=3)
abline(h=0,lty=3)
abline(v=0,lty=3)
title(main="Chi2, one degree of freedom")
curve(dchisq(x,1), xlim=c(0,10), ylim=c(0,.6), col='red', lwd=3)
curve(dchisq(x,2), add=T, col='green', lwd=3)
curve(dchisq(x,3), add=T, col='blue', lwd=3)
curve(dchisq(x,5), add=T, col='orange', lwd=3)
abline(h=0,lty=3)
abline(v=0,lty=3)
legend(par('usr')[2], par('usr')[4], xjust=1,
c('df=1', 'df=2', 'df=3', 'df=5'),
lwd=3,
lty=1,
col=c('red', 'green', 'blue', 'orange')
)
title(main='Chi^2 Distributions')
curve( dt(x,1), xlim=c(-3,3), ylim=c(0,.4), col='red', lwd=2 )
curve( dt(x,2), add=T, col='blue', lwd=2 )
curve( dt(x,5), add=T, col='green', lwd=2 )
curve( dt(x,10), add=T, col='orange', lwd=2 )
curve( dnorm(x), add=T, lwd=3, lty=3 )
title(main="Student T distributions")
legend(par('usr')[2], par('usr')[4], xjust=1,
c('df=1', 'df=2', 'df=5', 'df=10', 'Gaussian distribution'),
lwd=c(2,2,2,2,2),
lty=c(1,1,1,1,3),
col=c('red', 'blue', 'green', 'orange', par("fg")))
curve(dlnorm(x), xlim=c(-.2,5), lwd=3,
main="Log-normal distribution")
N <- 100
x <- cumsum(rnorm(N))
y <- cumsum(rnorm(N))
plot(x, y,
type = "o", pch = 16, lwd = 2,
xlab = "", ylab = "",
axes = FALSE,
main = "Brownian Motion")
box()
hist(y, col="light blue", probability=TRUE,
ylim=c(0,.25),
main="Mixture of gaussians")
curve(dnorm(x, mean=mean(y), sd=sd(y)),
add=TRUE, col="red", lwd=3, lty=2)
lines(density(x), col="red", lwd=3)
curve( p[2] * dnorm(x, mean=m[2], sd=s[2]),
col = "green", lwd = 3,
xlim = c(-5,5),
main = "The three gaussian distributions in our mixture",
xlab = "", ylab = "")
curve( p[1] * dnorm(x, mean=m[1], sd=s[1]),
col="red", lwd=3, add=TRUE)
curve( p[3] * dnorm(x, mean=m[3], sd=s[3]),
col="blue", lwd=3, add=TRUE)
curve( p[2] * dnorm(x, mean=m[2], sd=s[2]),
col = "green", lwd = 3,
xlim = c(-5,5),
main = "The three gaussian distributions in our mixture",
xlab = "", ylab = "")
curve( dgamma(x,1,1), xlim=c(0,5) )
curve( dgamma(x,2,1), add=T, col='red' )
curve( dgamma(x,3,1), add=T, col='green' )
curve( dgamma(x,4,1), add=T, col='blue' )
curve( dgamma(x,5,1), add=T, col='orange' )
title(main="Gamma probability distribution function")
legend(par('usr')[2], par('usr')[4], xjust=1,
c('k=1 (Exponential distribution)', 'k=2', 'k=3', 'k=4', 'k=5'),
lwd=1, lty=1,
col=c(par('fg'), 'red', 'green', 'blue', 'orange') )
n <- 500
x1 <- rexp(n,17)
x2 <- rexp(n,17)
x3 <- rexp(n,17)
x <- x1 + x2 + x3
# Simpler, but less readable:
# k <- 3
# x <- drop(apply( matrix( rexp(n*k,17), nr=n, nc=k ), 1, sum))
y <- qgamma(ppoints(n),3,17)
plot( sort(x) ~ sort(y), log='xy' )
abline(0,1, col='red')
title("Comparision: gamma distribution and sum of exponential r.v.")
curve( dbeta(x,1,1), xlim=c(0,1), ylim=c(0,4) )
curve( dbeta(x,2,1), add=T, col='red' )
curve( dbeta(x,3,1), add=T, col='green' )
curve( dbeta(x,4,1), add=T, col='blue' )
curve( dbeta(x,2,2), add=T, lty=2, lwd=2, col='red' )
curve( dbeta(x,3,2), add=T, lty=2, lwd=2, col='green' )
curve( dbeta(x,4,2), add=T, lty=2, lwd=2, col='blue' )
curve( dbeta(x,2,3), add=T, lty=3, lwd=3, col='red' )
curve( dbeta(x,3,3), add=T, lty=3, lwd=3, col='green' )
curve( dbeta(x,4,3), add=T, lty=3, lwd=3, col='blue' )
title(main="Beta distribution")
legend(par('usr')[1], par('usr')[4], xjust=0,
c('(1,1)', '(2,1)', '(3,1)', '(4,1)',
'(2,2)', '(3,2)', '(4,2)',
'(2,3)', '(3,3)', '(4,3)' ),
lwd=1, #c(1,1,1,1, 2,2,2, 3,3,3),
lty=c(1,1,1,1, 2,2,2, 3,3,3),
col=c(par('fg'), 'red', 'green', 'blue',
'red', 'green', 'blue',
'red', 'green', 'blue' ))
setwd("F:/Statistics with R/Probability Distribution")
colorie <- function (x, y1, y2, N=1000, ...) {
for (t in (0:N)/N) {
lines(x, t*y1+(1-t)*y2, ...)
}
}
# No, there is already a function to do this
colorie <- function (x, y1, y2, ...) {
polygon( c(x, x[length(x):1]), c(y1, y2[length(y2):1]), ... )
}
x <- seq(-6,6, length=100)
y <- dnorm(x)
plot(y~x, type='l')
i = x<qnorm(.025)
colorie(x[i],y[i],rep(0,sum(i)) ,col='red')
i = x>qnorm(.975)
colorie(x[i],y[i],rep(0,sum(i)) ,col='red')
lines(y~x)
title(main="Type I error")
x <- seq(-6,6, length=1000)
y <- dnorm(x)
plot(y~x, type='l')
y2 <- dnorm(x-.5)
lines(y2~x)
i <- x>qnorm(.025) & x<qnorm(.975)
colorie(x[i],y2[i],rep(0,sum(i)), col='red')
segments( qnorm(.025),0,qnorm(.025),dnorm(qnorm(.025)), col='red' )
segments( qnorm(.975),0,qnorm(.975),dnorm(qnorm(.975)), col='red' )
lines(y~x)
lines(y2~x)
title(main="High risk of type II error")
x <- seq(-6,6, length=1000)
y <- dnorm(x)
plot(y~x, type='l')
y2 <- dnorm(x-3.5)
lines(y2~x)
i <- x>qnorm(.025) & x<qnorm(.975)
colorie(x[i],y2[i],rep(0,sum(i)), col='red')
segments( qnorm(.025),0,qnorm(.025),dnorm(qnorm(.025)), col='red' )
segments( qnorm(.975),0,qnorm(.975),dnorm(qnorm(.975)), col='red' )
lines(y~x)
lines(y2~x)
title(main="Lower risk of type II error")
delta <- seq(-1.5, 1.5, length=500)
p <- NULL
for (d in delta) {
p <- append(p,
power.t.test(delta=abs(d), sd=1, sig.level=0.05, n=20,
type='one.sample')$power)
}
plot(1-p~delta, type='l',
xlab='mean difference', ylab="propability of a type II error",
main="type II error in a Student T test")
abline(h=0,lty=3)
abline(h=0.05,lty=3)
abline(v=0,lty=3)
p <- sort(p)
p[950]
p[50]
x <- 1:1000
plot(p ~ x, main="p-value of a Student T test when H0 is true")
curve(dnorm(x), from=-5, to=5, add=F, col="orange", lwd=3, lty=2)
curve(dt(x,100), from=-5, to=5, add=T, col=par('fg'))
curve(dt(x,5),  from=-5, to=5, add=T, col="red")
curve(dt(x,2),  from=-5, to=5, add=T, col="green")
curve(dt(x,1),  from=-5, to=5, add=T, col="blue")
legend(par('usr')[2], par('usr')[4], xjust=1,
c('gaussian', 'df=100', 'df=5', 'df=2', 'df=1'),
col=c('orange', par('fg'), 'red', 'green', 'blue'),
lwd=c(3,1,1,1,1),
lty=c(2,1,1,1,1))
title(main="Student's T probability distribution function")
setwd("F:/Statistics with R/Statistical Test")
##H0 (null hypothesis) and H1 (alternative hypothesis)####
#Type I error
colorie <- function (x, y1, y2, N=1000, ...) {
for (t in (0:N)/N) {
lines(x, t*y1+(1-t)*y2, ...)
}
}
# No, there is already a function to do this
colorie <- function (x, y1, y2, ...) {
polygon( c(x, x[length(x):1]), c(y1, y2[length(y2):1]), ... )
}
x <- seq(-6,6, length=100)
y <- dnorm(x)
plot(y~x, type='l')
i = x<qnorm(.025)
colorie(x[i],y[i],rep(0,sum(i)) ,col='red')
i = x>qnorm(.975)
colorie(x[i],y[i],rep(0,sum(i)) ,col='red')
lines(y~x)
title(main="Type I error")
#p-value####
#Type II error
x <- seq(-6,6, length=1000)
y <- dnorm(x)
plot(y~x, type='l')
y2 <- dnorm(x-.5)
lines(y2~x)
i <- x>qnorm(.025) & x<qnorm(.975)
colorie(x[i],y2[i],rep(0,sum(i)), col='red')
segments( qnorm(.025),0,qnorm(.025),dnorm(qnorm(.025)), col='red' )
segments( qnorm(.975),0,qnorm(.975),dnorm(qnorm(.975)), col='red' )
lines(y~x)
lines(y2~x)
title(main="High risk of type II error")
x <- seq(-6,6, length=1000)
y <- dnorm(x)
plot(y~x, type='l')
y2 <- dnorm(x-3.5)
lines(y2~x)
i <- x>qnorm(.025) & x<qnorm(.975)
colorie(x[i],y2[i],rep(0,sum(i)), col='red')
segments( qnorm(.025),0,qnorm(.025),dnorm(qnorm(.025)), col='red' )
segments( qnorm(.975),0,qnorm(.975),dnorm(qnorm(.975)), col='red' )
lines(y~x)
lines(y2~x)
title(main="Lower risk of type II error")
delta <- seq(-1.5, 1.5, length=500)
p <- NULL
for (d in delta) {
p <- append(p,
power.t.test(delta=abs(d), sd=1, sig.level=0.05, n=20,
type='one.sample')$power)
}
plot(1-p~delta, type='l',
xlab='mean difference', ylab="propability of a type II error",
main="type II error in a Student T test")
abline(h=0,lty=3)
abline(h=0.05,lty=3)
abline(v=0,lty=3)
curve(dnorm(x), from=-5, to=5, add=F, col="orange", lwd=3, lty=2)
curve(dt(x,100), from=-5, to=5, add=T, col=par('fg'))
curve(dt(x,5),  from=-5, to=5, add=T, col="red")
curve(dt(x,2),  from=-5, to=5, add=T, col="green")
curve(dt(x,1),  from=-5, to=5, add=T, col="blue")
legend(par('usr')[2], par('usr')[4], xjust=1,
c('gaussian', 'df=100', 'df=5', 'df=2', 'df=1'),
col=c('orange', par('fg'), 'red', 'green', 'blue'),
lwd=c(3,1,1,1,1),
lty=c(2,1,1,1,1))
title(main="Student's T probability distribution function")
setwd("F:/Statistics with R/Statistical Test")
setwd("F:/R Programming/Statistical Test")
##H0 (null hypothesis) and H1 (alternative hypothesis)####
#Type I error
colorie <- function (x, y1, y2, N=1000, ...) {
for (t in (0:N)/N) {
lines(x, t*y1+(1-t)*y2, ...)
}
}
# No, there is already a function to do this
colorie <- function (x, y1, y2, ...) {
polygon( c(x, x[length(x):1]), c(y1, y2[length(y2):1]), ... )
}
x <- seq(-6,6, length=100)
y <- dnorm(x)
plot(y~x, type='l')
i = x<qnorm(.025)
colorie(x[i],y[i],rep(0,sum(i)) ,col='red')
i = x>qnorm(.975)
colorie(x[i],y[i],rep(0,sum(i)) ,col='red')
lines(y~x)
title(main="Type I error")
#p-value####
#Type II error
x <- seq(-6,6, length=1000)
y <- dnorm(x)
plot(y~x, type='l')
y2 <- dnorm(x-.5)
lines(y2~x)
i <- x>qnorm(.025) & x<qnorm(.975)
colorie(x[i],y2[i],rep(0,sum(i)), col='red')
segments( qnorm(.025),0,qnorm(.025),dnorm(qnorm(.025)), col='red' )
segments( qnorm(.975),0,qnorm(.975),dnorm(qnorm(.975)), col='red' )
lines(y~x)
lines(y2~x)
title(main="High risk of type II error")
x <- seq(-6,6, length=1000)
y <- dnorm(x)
plot(y~x, type='l')
y2 <- dnorm(x-3.5)
lines(y2~x)
i <- x>qnorm(.025) & x<qnorm(.975)
colorie(x[i],y2[i],rep(0,sum(i)), col='red')
segments( qnorm(.025),0,qnorm(.025),dnorm(qnorm(.025)), col='red' )
segments( qnorm(.975),0,qnorm(.975),dnorm(qnorm(.975)), col='red' )
lines(y~x)
lines(y2~x)
title(main="Lower risk of type II error")
delta <- seq(-1.5, 1.5, length=500)
p <- NULL
for (d in delta) {
p <- append(p,
power.t.test(delta=abs(d), sd=1, sig.level=0.05, n=20,
type='one.sample')$power)
}
plot(1-p~delta, type='l',
xlab='mean difference', ylab="propability of a type II error",
main="type II error in a Student T test")
abline(h=0,lty=3)
abline(h=0.05,lty=3)
abline(v=0,lty=3)
curve(dnorm(x), from=-5, to=5, add=F, col="orange", lwd=3, lty=2)
curve(dt(x,100), from=-5, to=5, add=T, col=par('fg'))
curve(dt(x,5),  from=-5, to=5, add=T, col="red")
curve(dt(x,2),  from=-5, to=5, add=T, col="green")
curve(dt(x,1),  from=-5, to=5, add=T, col="blue")
legend(par('usr')[2], par('usr')[4], xjust=1,
c('gaussian', 'df=100', 'df=5', 'df=2', 'df=1'),
col=c('orange', par('fg'), 'red', 'green', 'blue'),
lwd=c(3,1,1,1,1),
lty=c(2,1,1,1,1))
title(main="Student's T probability distribution function")
